import { Plugin } from 'vite'
import * as babelTypes from '@babel/types';
import {transform} from '@babel/core'
import {WindowProxyBabelPlugin} from "../../babel-plugin-execve/src/babel-plugin.ts";
import magic from "../../babel-plugin-execve/src/magic.ts";

function doTransformFile(code:string,id:string) {
    console.log("prepare to transform:",id);
    const result= transform(code, {
        filename:id,
        babelrc: false,
        //configFile: false,
        presets: [
            ['@babel/preset-env', {modules: false}],
            '@babel/preset-typescript'
        ],
        plugins: [
            WindowProxyBabelPlugin(babelTypes)
        ],
        //sourceMaps: 'inline'
    });
    let newCode=result!!.code;
    newCode=`${magic}if(!window.windowProxy){console.log("[proxy] use origin window as a fallback");window.windowProxy=window;}${newCode}`
    return {
        code: newCode,
        map: result!!.map
    }
}

// https://vitejs.dev/config/
       export function vitePluginExecveBabel():Plugin{
           return {
               name: 'vite-transform-plugin',
               transform(code, id) {
                   console.warn("id:", id);
                   if (id.indexOf('.js') === -1 && id.indexOf(".ts")===-1) {
                       return;
                   }
                   return doTransformFile(code, id);
               }
           }
        }
